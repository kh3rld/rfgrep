name: Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security audit job
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Generate lockfile if missing
        run: cargo generate-lockfile

      - name: Install cargo-audit
        run: |
          cargo install cargo-audit --version 0.18.0
          cargo audit --version

      - name: Run security audit
        run: |
          cargo audit --json | tee audit-report.json
          cargo audit --deny warnings

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-report
          path: audit-report.json

  # Test job
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: |
          cargo test --all-features --workspace --verbose
          cargo test --all-features --workspace --verbose --release

      - name: Run clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Build job
  build:
    name: Build
    needs: [audit, test]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rfgrep-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rfgrep-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rfgrep-macos-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }}
          ls -la target/${{ matrix.target }}/release/

      - name: Create release package
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/rfgrep* release/
          cp -r man release/ 2>/dev/null || true
          cp *.md release/ 2>/dev/null || true
          cp *.sh release/ 2>/dev/null || true
          ls -la release/

      - name: Create release archive
        run: |
          tar -czf ${{ matrix.artifact_name }}.tar.gz -C release .
          ls -la *.tar.gz

      - name: Generate checksums
        run: |
          sha256sum *.tar.gz > checksums.txt
          cat checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            checksums.txt

  # Release job
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "checksums.txt" -exec cat {} \; > release-assets/checksums.txt
          ls -la release-assets/

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## üéâ rfgrep ${{ steps.version.outputs.version }}
            
            ### üì¶ What's New
            
            This release transforms rfgrep from a basic utility into a professional-grade command-line tool with comprehensive documentation and enhanced user experience.
            
            ### ‚ú® Key Features
            
            - **Comprehensive Documentation System** with man pages
            - **Shell Completions** for all major shells (Bash, Zsh, Fish, PowerShell, Elvish)
            - **Interactive Search Mode** (ready for integration)
            - **Adaptive Memory Management** for optimal performance
            - **Multiple Search Algorithms** (Boyer-Moore, Simple, Regex)
            - **Output Format Support** (JSON, XML, HTML, Markdown)
            - **Enhanced CLI** with improved help and examples
            - **Progress Reporting** and statistics
            - **Improved Error Handling** and user experience
            - **Complete Installation Guide** and release documentation
            
            ### üöÄ Installation
            
            ```
            # Download and extract
            tar -xzf rfgrep-*.tar.gz
            
            # Install binary
            sudo cp rfgrep /usr/local/bin/
            
            # Install man pages
            sudo cp -r man/* /usr/local/share/man/
            sudo mandb
            
            # Install shell completions
            rfgrep completions bash | sudo tee /etc/bash_completion.d/rfgrep
            rfgrep completions zsh | sudo tee /usr/local/share/zsh/site-functions/_rfgrep
            ```
            
            ### üìã System Requirements
            
            - **Rust**: 1.70 or later
            - **Linux**: x86_64, ARM64
            - **macOS**: x86_64, ARM64
            - **Windows**: x86_64
            
            ### üîß Usage Examples
            
            ```
            # Basic search
            rfgrep search "pattern" /path/to/files
            
            # Interactive mode
            rfgrep interactive "pattern"
            
            # List files
            rfgrep list /path/to/directory
            
            # Generate completions
            rfgrep completions bash
            ```
            
            ### üìö Documentation
            
            - **Man Pages**: `man rfgrep`
            - **Help**: `rfgrep --help`
            - **Installation Guide**: See INSTALLATION_GUIDE.md
            
            ### üîç What's Changed
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
            
            ### ü§ù Contributing
            
            We welcome contributions! Please see our contributing guidelines in the repository.
            
            ---
            
            **Thank you for using rfgrep!** üéâ
          files: |
            release-assets/*.tar.gz
            release-assets/checksums.txt
          draft: false
          prerelease: false
          generate_release_notes: false

  # Documentation job
  docs:
    name: Documentation
    needs: [audit, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Generate documentation
        run: |
          cargo doc --no-deps --all-features
          cargo test --doc --all-features

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: target/doc/

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write    # Grant permission needed for SARIF upload
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 