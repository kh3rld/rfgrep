name: Snap Release

on:
  push:
    tags: ["v*", "v*-*"]  # Support prereleases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v0.2.1'
      channel:
        description: 'Snap channel to release to'
        required: true
        default: 'edge'
        type: choice
        options:
          - edge
          - beta
          - candidate
          - stable

env:
  SNAP_NAME: rfgrep
  SNAP_BASE: core22

jobs:
  build-snap:
    name: Build Snap Package
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up snapcraft
        uses: snapcore/action-setup@v1
        with:
          snapcraft-channel: '8.x/stable'

      - name: Build snap package
        run: |
          cd snap
          snapcraft pack --destructive-mode --output ../rfgrep.snap
        env:
          SNAPCRAFT_BUILD_ENVIRONMENT: host

      - name: Verify snap package
        run: |
          snap ack rfgrep.snap || true
          snap install rfgrep.snap --dangerous
          rfgrep --version
          snap remove rfgrep

      - name: Upload snap artifact
        uses: actions/upload-artifact@v4
        with:
          name: rfgrep-snap
          path: rfgrep.snap
          retention-days: 30

  publish-snap:
    name: Publish to Snap Store
    runs-on: ubuntu-latest
    needs: build-snap
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up snapcraft
        uses: snapcore/action-setup@v1
        with:
          snapcraft-channel: '8.x/stable'

      - name: Download snap artifact
        uses: actions/download-artifact@v5
        with:
          name: rfgrep-snap
          path: .

      - name: Login to Snap Store
        run: |
          echo "${{ secrets.SNAP_STORE_LOGIN }}" | base64 -d > snap_login.json
          snapcraft login --with snap_login.json
          echo "Logged in as: $(snapcraft whoami)"

      - name: Register snap name (if needed)
        run: |
          echo "Registering snap name: ${{ env.SNAP_NAME }}"
          snapcraft register ${{ env.SNAP_NAME }} || echo "Snap name already registered to kherld.hussein@gmail.com"

      - name: Upload to Snap Store
        run: |
          # Determine channel based on input or tag
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            CHANNEL="${{ github.event.inputs.channel }}"
          else
            # Auto-determine channel based on tag
            if [[ "${{ github.ref_name }}" == *"-"* ]]; then
              CHANNEL="edge"
            else
              CHANNEL="stable"
            fi
          fi
          
          echo "Publishing to channel: $CHANNEL"
          echo "Publisher: kherld.hussein@gmail.com"
          snapcraft upload rfgrep.snap --release=$CHANNEL

      - name: Release to additional channels
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.channel == 'stable'
        run: |
          # Release from stable to other channels if this is a stable release
          snapcraft release ${{ env.SNAP_NAME }} ${{ github.event.inputs.version }} stable
          snapcraft release ${{ env.SNAP_NAME }} ${{ github.event.inputs.version }} candidate
          snapcraft release ${{ env.SNAP_NAME }} ${{ github.event.inputs.version }} beta

  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [build-snap, publish-snap]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.publish-snap.result == 'success'
        run: |
          echo "✅ Snap package successfully published to Snap Store!"
          echo "📦 Package: ${{ env.SNAP_NAME }}"
          echo "🏷️  Version: ${{ github.ref_name }}"
          echo "👤 Publisher: kherld.hussein@gmail.com"
          echo "🔗 Store: https://snapcraft.io/${{ env.SNAP_NAME }}"
          echo "📥 Install: snap install ${{ env.SNAP_NAME }}"

      - name: Notify failure
        if: needs.publish-snap.result == 'failure'
        run: |
          echo "❌ Snap package publishing failed!"
          echo "📦 Package: ${{ env.SNAP_NAME }}"
          echo "🏷️  Version: ${{ github.ref_name }}"
          exit 1
