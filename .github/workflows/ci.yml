# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following Jobs
name: CI

on:
  push:
    branches: [ main, dev, 'release/**' ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      run_shell_harness:
        description: 'Run the repository shell harness under Xvfb (optional)'
        required: false
        default: 'false'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, 1.87.0]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo target
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features --workspace --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for unused dependencies
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build release artifacts
    needs: [test, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rfgrep-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rfgrep-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rfgrep-macos
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip debug symbols
        if: matrix.target != 'x86_64-pc-windows-msvc'
        run: strip target/${{ matrix.target }}/release/rfgrep || true

      - name: Prepare release assets
        if: runner.os != 'Windows'
        run: |
          mkdir -p release
          make -C man gzip || true
          cp target/${{ matrix.target }}/release/rfgrep release/${{ matrix.artifact_name }} || true
          cp man/*.gz release/ || true
          cp LICENSE release/ || true

      - name: Generate checksums
        if: runner.os != 'Windows'
        run: |
          cd release
          if [ "${{ runner.os }}" = "macos-latest" ]; then
            shasum -a 256 * > SHA256SUMS
          else
            sha256sum * > SHA256SUMS
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.artifact_name }}
          path: release/**

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**/*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          discussion_category_name: 'Announcements'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration:
    name: Integration (optional)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.run_shell_harness == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (Xvfb)
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build release
        run: cargo build --release

      - name: Run integration tests (Rust)
        run: cargo test --tests --verbose

      - name: Run shell harness under Xvfb
        run: |
          Xvfb :99 -screen 0 1024x768x24 &
          export DISPLAY=:99
          chmod +x tests/run_tests.sh
          ./tests/run_tests.sh

  publish:
    name: Publish to Crates.io
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo publish --dry-run
          cargo publish

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
