# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following Jobs
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  CARGO_INCREMENTAL: 0  

jobs:
  # Test Job
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, 1.87.0]  # MSRV
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test --all-features --workspace --verbose

  # Linting and Code Quality
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for unused dependencies
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build the project and package the release
  build:
    name: Build Release
    needs: [test, lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rfgrep-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rfgrep-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rfgrep-macos
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Strip debug symbols (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: strip target/${{ matrix.target }}/release/rfgrep || true

      - name: Prepare release assets (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p release
          make -C man gzip
          cp target/${{ matrix.target }}/release/rfgrep release/
          cp man/*.gz release/
          cp LICENSE release/

      - name: Package artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "This step is now part of 'Prepare release assets (Unix)'"

      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release
          Copy-Item "target\${{ matrix.target }}\release\rfgrep.exe" release

      - name: Generate checksums (Unix)
        if: runner.os != 'Windows'
        run: |
          cd release
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            shasum -a 256 * > SHA256SUMS
          else
            sha256sum * > SHA256SUMS
          fi

      - name: Generate checksums (Windows)
        if: runner.os == 'Windows'
        run: |
          cd release
          certutil -hashfile rfgrep.exe SHA256 > rfgrep.exe.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: release/

  # Create a GitHub Release
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/release') || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p dist
          # Organize by platform
          for artifact in artifacts/*; do
            platform=$(basename $artifact | sed 's/rfgrep-//')
            mkdir -p dist/$platform
            cp $artifact/* dist/$platform/
          done
          
          # Combine checksums
          find artifacts -name "SHA256SUMS" -exec cat {} \; > dist/SHA256SUMS
          find artifacts -name "*.sha256" -exec cat {} \; > dist/SHA256SUMS.windows

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*
          generate_release_notes: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          discussion_category_name: "Announcements"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to Crates.io
  publish:
    name: Publish to Crates.io
    needs: [test, lint]
    runs-on: ubuntu-latest
    # if: github.event_name == 'push' && (github.ref == 'refs/heads/release' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Publish to crates.io
        run: |
          cargo publish --dry-run --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
